/**
 * This file is part of OGEMA.
 *
 * OGEMA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OGEMA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OGEMA. If not, see <http://www.gnu.org/licenses/>.
 */
package org.ogema.driver.xbee.serialconnection;

import org.ogema.driver.xbee.Configuration;
import org.ogema.driver.xbee.Constants;
import org.slf4j.Logger;

import jssc.SerialPort;
import jssc.SerialPortException;

public class SerialPortWriter implements Runnable {
	private volatile boolean running;
	private SerialPort serialPort;

	protected Fifo<byte[]> outputFifo = new Fifo<byte[]>(8); // 1<<8=256

	private final Logger logger = org.slf4j.LoggerFactory.getLogger("xbee-driver");

	public SerialPortWriter(SerialPort serialPort) {
		this.serialPort = serialPort;
		running = true;
	}

	/**
	 * 
	 * @param payload
	 *            The complete XBee frame generated by the FrameFactory.
	 */
	public synchronized void sendData(byte[] payload) {
		outputFifo.put(payload);
		notify();
	}

	/**
	 * 
	 * @param running
	 *            Let's the loop in run() finish and then exit.
	 */
	public void stop() {
		this.running = false;
	}

	/**
	 * Sends all frames from the FiFo
	 */
	private void sendFromFifo() {
		while (outputFifo.count > 0) {
			try {
				byte[] frame = outputFifo.get();
				boolean success = serialPort.writeBytes(frame);
				if (Configuration.DEBUG) {
					logger.debug("Successful sent: " + success);
					logger.debug("sendFromFifo:\n " + Constants.bytesToHex(frame));
				}
			} catch (SerialPortException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	@Override
	public void run() {
		while (running) {
			synchronized (this) {
				while (outputFifo.count < 1) {
					try {
						wait();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				sendFromFifo();
			}
		}
	}
}
