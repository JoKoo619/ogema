/**
 * This file is part of OGEMA.
 *
 * OGEMA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OGEMA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OGEMA. If not, see <http://www.gnu.org/licenses/>.
 */
package org.ogema.model.targetranges;

import org.ogema.core.model.SimpleResource;
import org.ogema.model.prototypes.Data;
import org.ogema.model.ranges.Range;

/**
 * Prototype for control settings that can be attached to any sensor reading
 * or actor switch. This prototype cannot be used by itself. Only models extending
 * this can be created, which then must specify the content of the fields.
 */
public interface TargetRange extends Data {

	/**
	 * Control setpoint for the value. This values shall be reached by
	 * actions of an OGEMA application, no action based on this value is
	 * performed by the framework itself. If no setpoint is given, an estimate
	 * may be guessed from taking the center point of the {@link #targetRange()},
	 *  the {@link #controlLimits() } or the {@link #alarmLimits() } (in descending
	 * order of relevance).
	 * Models inheriting from this prototype must override
	 * this with a suitable simple resource to define the meaning and the unit
	 * of measurement.
	 */
	SimpleResource setpoint();

	/**
	 * Range which the sensor value shall lie as a result of control, if possible. The range is considered as soft
	 * limits, i.e. contrary to the {@link #controlLimits() controlLimits} the so-defined ambient range may be left. If
	 * not targetRange is given, the {@link #setpoint() setpoint} may indicate where the range lies.
	 */
	Range targetRange();

	/**
	 * Limits for the sensor value that shall be used for the control of the relevant device. Usually the controlLimits
	 * should be held for sure.
	 */
	Range controlLimits();

	/**
	 * The resource shall only be used for limits that shall be integrated into an alarm logging and/or alarm handling
	 * OGEMA application. It is NOT intended for limits that just trigger control signals.<br>
	 * Note: No alarm events are generated by the OGEMA framework itself.<br>
	 * For sensors providing information not represented as float, a resource of the relevant range type named
	 * alarmLimits<Type> can be added as decorator.
	 */
	Range alarmLimits();
}
