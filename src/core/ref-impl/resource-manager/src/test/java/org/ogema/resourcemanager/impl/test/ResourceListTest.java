/**
 * This file is part of OGEMA.
 *
 * OGEMA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * as published by the Free Software Foundation.
 *
 * OGEMA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OGEMA. If not, see <http://www.gnu.org/licenses/>.
 */
package org.ogema.resourcemanager.impl.test;

import org.ogema.exam.StructureTestListener;

import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

import org.junit.Test;
import org.ogema.core.model.Resource;
import org.ogema.core.model.ResourceList;
import org.ogema.core.model.simple.BooleanResource;
import org.ogema.core.model.simple.StringResource;
import org.ogema.core.resourcemanager.InvalidResourceTypeException;
import org.ogema.core.resourcemanager.ResourceException;

import static org.ogema.core.resourcemanager.ResourceStructureEvent.EventType.SUBRESOURCE_ADDED;
import static org.ogema.core.resourcemanager.ResourceStructureEvent.EventType.SUBRESOURCE_REMOVED;

import org.ogema.model.actors.OnOffSwitch;
import org.ogema.model.locations.Room;
import org.ogema.model.locations.WorkPlace;
import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
import org.ops4j.pax.exam.spi.reactors.PerClass;

/**
 * @author jlapp
 */
@ExamReactorStrategy(PerClass.class)
public class ResourceListTest extends OsgiTestBase {

	public static final String RESNAME = OsgiTestBase.class.getSimpleName();
	Room room;

	protected ResourceList<WorkPlace> createTestResource() {
		room = resMan.createResource("room" + counter++, Room.class);
		room.workPlaces().create();
		ResourceList<WorkPlace> wps = room.workPlaces();
		return room.workPlaces();
	}

	@Test
	//@Ignore
	// ... on resource objects
    //note: works with ASM-generated byte code but not with Java dynamic proxies.
	public void genericListTypeIsAvailableViaReflection() throws Exception {
		createTestResource();
		Method wpsAccess = room.getClass().getMethod("workPlaces");

		Type gType = wpsAccess.getGenericReturnType();
		assertTrue(gType instanceof ParameterizedType);
		Class<?> typeParameter = (Class) ((ParameterizedType) gType).getActualTypeArguments()[0];
		assertEquals(WorkPlace.class, typeParameter);
	}

	@Test
	public void elementTypeIsCorrect() {
		ResourceList<WorkPlace> wps = createTestResource();
		assertEquals(WorkPlace.class, room.workPlaces().getElementType());
	}

	@Test
	public void resourceTypeIsCorrect() {
		ResourceList<WorkPlace> wps = createTestResource();
		final Class<? extends Resource> resType = room.workPlaces().getResourceType();
		assertEquals(ResourceList.class, resType);
	}

	@Test
	public void getSubResourcesByTypeFindsResourceLists() {
		ResourceList<WorkPlace> wps = createTestResource();
		//XXX this cannot currently be expressed without generating a compiler warning
		@SuppressWarnings("rawtypes")
		List<ResourceList> l = room.getSubResources(ResourceList.class, true);
		assertFalse(l.isEmpty());
		assertEquals(1, l.size());
		assertEquals(wps, l.get(0));
	}

	@Test
	public void addingToOptionalComplexArrayWorks() throws ResourceException {
		ResourceList<WorkPlace> wps = createTestResource();
		WorkPlace wp1 = wps.add();
		assertTrue(wp1.exists());
		assertEquals(1, wps.size());
		assertEquals(wp1, wps.getSubResource(wp1.getName()));
		assertTrue(wps.getAllElements().contains(wp1));
	}

	@Test
	public void addingMultipleToOptionalComplexArrayWorks() throws ResourceException {
		ResourceList<WorkPlace> wps = createTestResource();
		final List<WorkPlace> workPlaces = new ArrayList<WorkPlace>();
		for (int i = 0; i < 5; ++i) {
			final WorkPlace wp = wps.add();
			workPlaces.add(wp);
			for (WorkPlace place : workPlaces) {
				assertTrue(wps.getAllElements().contains(place));
			}
			assertEquals(workPlaces.size(), wps.getAllElements().size());
		}
	}

	@Test
	public void elementsAddedViaResourceMethodsAppearInArray() {
		ResourceList<WorkPlace> wps = createTestResource();
		WorkPlace wp1 = wps.add();
		WorkPlace wp2 = wps.addDecorator("fnord", wps.getElementType());
		assertEquals(2, wps.size());
		assertTrue(wps.getAllElements().contains(wp1));
		assertTrue(wps.getAllElements().contains(wp2));
	}

	@Test
	public void referencesAddedViaResourceMethodsAppearInArray() {
		ResourceList<WorkPlace> wps = createTestResource();
		ResourceList<WorkPlace> wps2 = createTestResource();
		// WorkPlace wpExt = wps2.add();
		Room r = resMan.createResource("room", Room.class);
		WorkPlace wpExt = r.addDecorator("xyz", WorkPlace.class);
		assertNotNull(wpExt);
		WorkPlace wp1 = wps.add();
		wps.addDecorator("fnord", wpExt);
		assertEquals(2, wps.size());
		assertTrue(wps.getAllElements().contains(wp1));
		WorkPlace wpRef = (WorkPlace) wps.getSubResource("fnord");
		assertNotNull(wpRef);
		assertTrue(wps.getAllElements().contains(wpRef));
	}

	@Test
	public void containsWorksOnLocation() {
		ResourceList<WorkPlace> wps = createTestResource();
		ResourceList<WorkPlace> wps2 = createTestResource();

		WorkPlace wp1 = wps.addDecorator("test", WorkPlace.class);
		WorkPlace wp2 = wps2.add();
		wps.add(wp2);

		assertTrue(wps.contains(wp1));
		assertTrue(wps.contains(wps2.getAllElements().get(0)));
	}

	@Test
	public void addingResourceListAsDecoratorWorks() {
		Room r = resMan.createResource(newResourceName(), Room.class);
		//XXX possible to change the API so this can work without a warning?
		@SuppressWarnings("unchecked")
		ResourceList<StringResource> list = r.addDecorator("fnord", ResourceList.class);
		assertNull(list.getElementType());
		list.setElementType(StringResource.class);
		StringResource str = list.add();
		assertNotNull(str);
	}

	@Test
	public void settingResourceListAsOptionalElementWorks() {
		Room room1 = resMan.createResource(newResourceName(), Room.class);
		Room room2 = resMan.createResource(newResourceName(), Room.class);

		room1.workPlaces().create();
		WorkPlace wp1 = room1.workPlaces().add();
		room2.workPlaces().setAsReference(room1.workPlaces());

		assertTrue(room2.workPlaces().exists());
		assertFalse(room2.workPlaces().getAllElements().isEmpty());
	}

	@Test(expected = InvalidResourceTypeException.class)
	public void settingResourceListAsOptionalElementChecksListType() {
		Room room1 = resMan.createResource(newResourceName(), Room.class);
		ResourceList<?> listDecorator = room1.addDecorator("foo", ResourceList.class);
		listDecorator.setElementType(OnOffSwitch.class);
		listDecorator.addDecorator("fnord", OnOffSwitch.class);

		assertEquals(OnOffSwitch.class, listDecorator.getElementType());

		room1.workPlaces().setAsReference(listDecorator);
	}

	@Test
	public void structureListenerWorksWithAddAndRemove() throws InterruptedException {
		StructureTestListener l = new StructureTestListener();

		ResourceList<WorkPlace> list = createTestResource();
		list.addStructureListener(l);
		WorkPlace element = list.add();
		assertTrue(l.awaitEvent(SUBRESOURCE_ADDED));
		l.setExpectedChangedResource(element);

		list.remove(element);
		assertTrue(l.awaitEvent(SUBRESOURCE_REMOVED));
	}

	@Test
	public void virtualResourceListIsCreatable() {
		room = resMan.createResource("room" + counter++, Room.class);
		final ResourceList<WorkPlace> places = room.workPlaces();
		assertNotNull(places);
		assertFalse(places.exists());
		assertEquals(ResourceList.class, places.getResourceType());
		assertEquals(WorkPlace.class, places.getElementType());
		places.create();
		assertTrue(places.exists());
		assertEquals(ResourceList.class, places.getResourceType());
		assertEquals(WorkPlace.class, places.getElementType());
	}

	@Test
	public void canAddElementsToVirtualResourceList() {
		room = resMan.createResource("room" + counter++, Room.class);
		final ResourceList<WorkPlace> places = room.workPlaces();

		WorkPlace wp = places.add();
		WorkPlace wp2 = places.add();
		assertNotNull(wp);
		assertFalse(wp.exists());
		assertFalse(places.exists());

		wp.create();
		assertTrue(places.exists());
		assertTrue(wp.exists());
		assertFalse(wp2.exists());

		WorkPlace wp3 = places.add();
		assertTrue(wp3.exists());
	}

	@Test
	public void removeWorksForDirectSubresources() {
		room = resMan.createResource(newResourceName(), Room.class);
		final ResourceList<WorkPlace> wps = room.workPlaces();
		wps.create();

		WorkPlace el = wps.add();
		assertEquals(1, wps.size());
		assertTrue(wps.getAllElements().contains(el));

		wps.remove(el);
		assertEquals(0, wps.size());
		assertFalse(wps.getAllElements().contains(el));
	}

	@Test
	public void deleteOnElementWorks() {
		room = resMan.createResource(newResourceName(), Room.class);
		final ResourceList<WorkPlace> wps = room.workPlaces();
		wps.create();

		WorkPlace el = wps.add();
		assertEquals(1, wps.size());
		assertTrue(el.exists());
		assertTrue(wps.getAllElements().contains(el));

		el.delete();
		assertEquals(0, wps.size());
		assertFalse(wps.getAllElements().contains(el));
	}

	@Test
    public void addedElementsRetainOrder() {
        ResourceList<StringResource> strings = resMan.createResource(newResourceName(), ResourceList.class);
        strings.setElementType(StringResource.class);
        
        List<String> values = new ArrayList<>(Arrays.asList("3", "1", "2", "4"));
        
        StringResource sv = resMan.createResource(newResourceName(), StringResource.class);
        sv.setValue("3");
        strings.add(sv);
        
        sv = resMan.createResource(newResourceName(), StringResource.class);
        sv.setValue("1");
        strings.add(sv);
        
        sv = resMan.createResource(newResourceName(), StringResource.class);
        sv.setValue("2");
        strings.add(sv);
        
        sv = resMan.createResource(newResourceName(), StringResource.class);
        sv.setValue("4");
        strings.add(sv);
        
        for (int i = 0; i < values.size(); i++){
            assertEquals(values.get(i), strings.getAllElements().get(i).getValue());
        }
        
        values.add("6");
        strings.add().setValue("6");
        
        values.add("8");
        strings.add().setValue("8");
        
        values.add("5");
        strings.add().setValue("5");
        
        values.add("7");
        strings.add().setValue("7");
        
        for (int i = 0; i < values.size(); i++){
            assertEquals(values.get(i), strings.getAllElements().get(i).getValue());
        }
    }
    
    @Test public void addingReferencesWithSameNameWorks(){
        OnOffSwitch sw1 = resMan.createResource(newResourceName(), OnOffSwitch.class);
        OnOffSwitch sw2 = resMan.createResource(newResourceName(), OnOffSwitch.class);
        
        ResourceList<BooleanResource> stateList = resMan.createResource(newResourceName(), ResourceList.class);
        stateList.setElementType(BooleanResource.class);
        
        stateList.add(sw1.stateControl().<BooleanResource>create());
        stateList.add(sw2.stateControl().<BooleanResource>create());
        
        assertEquals(2, stateList.size());
        System.out.println(stateList.getAllElements());
    }
    
}
